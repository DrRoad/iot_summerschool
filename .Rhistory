# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$a ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$a,ECOTRON2$Date, col="red")
lines(ECOTRON3$a,ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
View(ECOTRON2)
plotEcotronData <- function(ECOTRON1,ECOTRON2, ECOTRON3) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b,ECOTRON2$Date, col="red")
lines(ECOTRON3$b,ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b,ECOTRON2$Date, col="red")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
plotEcotronData <- function(ECOTRON1,ECOTRON2, ECOTRON3) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$variable ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$variable~ECOTRON2$Date, col="red")
lines(ECOTRON3$variable~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, b)
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, b)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
ECOTRON3 <- getCSVData(320)
View(ECOTRON3)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
View(ECOTRON3)
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
View(ECOTRON1)
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
### Import CSV Data ###
# TODO: change location
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1$b ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2$b~ECOTRON2$Date, col="red")
lines(ECOTRON3$b~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3)
View(ECOTRON1)
View(ECOTRON2)
View(ECOTRON3)
View(ECOTRON1)
# Summer School 2018: IoT
# Script for analysis of incoming sensor data
# 18-08-31
# Version 0.1
# libraries
library(readr)
library(lubridate)
### Import CSV Data ###
# TODO: change location
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRONsub)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318)
ECOTRON2 <- getCSVData(319)
ECOTRON3 <- getCSVData(320)
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRONsub)
}
ECOTRON1 <- getCSVData(318)
getCSVData <-  function(channel) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feed.csv", sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
ECOTRON1 <- getCSVData(318)
View(ECOTRON1)
### Import CSV Data ###
# TODO: change location
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/318/feeds?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title="CO2 Measurement", c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feeds?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
ECOTRON2 <- getCSVData(319, "BJT4PQDOKAWQVGAD")
ECOTRON3 <- getCSVData(320, "G03E8ZGJNU37MVMZ")
# Summer School 2018: IoT
# Script for analysis of incoming sensor data
# 18-08-31
# Version 0.1
# libraries
library(readr)
library(lubridate)
### Import CSV Data ###
# TODO: change location
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feeds?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title=paste(variable, " Measurement", sep=""), c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
ECOTRON2 <- getCSVData(319, "BJT4PQDOKAWQVGAD")
ECOTRON3 <- getCSVData(320, "G03E8ZGJNU37MVMZ")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feeds.csv?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title=paste(variable, " Measurement", sep=""), c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
ECOTRON2 <- getCSVData(319, "BJT4PQDOKAWQVGAD")
ECOTRON3 <- getCSVData(320, "G03E8ZGJNU37MVMZ")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/channels/", channel, "/feeds.csv?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title=paste(variable, " Measurement", sep=""), c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
ECOTRON2 <- getCSVData(319, "BJT4PQDOKAWQVGAD")
ECOTRON3 <- getCSVData(320, "G03E8ZGJNU37MVMZ")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
library(readr)
library(lubridate)
### Import CSV Data ###
# TODO: change location
getCSVData <-  function(channel,api_key) {
# Get CSV File
ECOTRON <- read_csv(url(paste("http://thingspeak.umwelt-campus.de/stream/channels/", channel, "/feeds?api_key=", api_key, sep="")))
### Name columns #############################################
# TODO: Change dummies: a,b,c... to variables
colnames(ECOTRON) <- c("Date","Entry_id", "a", "b", "c", "d", "e", "f", "g", "h")
### Date conversion ##########################################
ECOTRON$Date <- as.POSIXct(ECOTRON$Date, "%Y-%m-%d %H:%M:%S", tz="UTC")
# Change timezone
ECOTRON$Date <- with_tz(ECOTRON$Date, "CET")
### Slice data, define start date and end date
# start: 31.8.2018, 6pm
# end: 1.9.2018, 9am
# TODO: Change actual start and end date
ECOTRONsub<- subset(ECOTRON, ECOTRON$Date >='2018-08-31 13:15:02' &
ECOTRON$Date <= '2018-08-31 14:00:36')
return(ECOTRON)
}
plotEcotronData <- function(ECOTRON1, ECOTRON2, ECOTRON3, variable) {
# Temperatur
plot(ECOTRON1[[variable]] ~ ECOTRON1$Date, type="l",
col="green",format="%Y-%m-%d %H:%M:%S")
lines(ECOTRON2[[variable]]~ECOTRON2$Date, col="red")
lines(ECOTRON3[[variable]]~ECOTRON3$Date, col="blue")
legend("topright", title=paste(variable, " Measurement", sep=""), c("ECO1", "ECO2", "ECO3"), fill=c("green","red","blue"),
bg = "gray90", cex=0.8, inset=.05)
}
ECOTRON1 <- getCSVData(318, "KYYV1D41TADHWA6X")
ECOTRON2 <- getCSVData(319, "BJT4PQDOKAWQVGAD")
ECOTRON3 <- getCSVData(320, "G03E8ZGJNU37MVMZ")
plotEcotronData(ECOTRON1, ECOTRON2, ECOTRON3, "b")
